buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.6.1'
    id 'com.jfrog.bintray' version '1.7.2'
    id 'com.github.ben-manes.versions' version '0.13.0'
}

apply from: 'gradle/publishing.gradle'

repositories {
    jcenter()
}

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer
version = fxyz_sampler_version
apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    //samples.extendsFrom mainRuntime
    jdk
}

sourceSets {
    main {
        compileClasspath += configurations.jdk
    }
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.fxyz3d.client.FXyzClient'
}

dependencies {    
    compile 'org.controlsfx:controlsfx:8.40.14'
    compile 'org.reactfx:reactfx:2.0-M5'    
    
    try {
        jdk files(jfxrtJar)
    } catch (MissingPropertyException pne) {
        jdk files("${System.properties['java.home']}/lib/jfxrt.jar")
        jdk files("${System.properties['java.home']}/lib/ext/jfxrt.jar")
    }
}

javadoc {
    exclude 'impl/*'
    failOnError = false
    classpath = project.sourceSets.main.runtimeClasspath + configurations.jdk
    
    options.windowTitle("FXSampler Project ${version}")
    options.links("http://docs.oracle.com/javase/8/docs/api/");
    options.links("http://docs.oracle.com/javase/8/javafx/api/");
    options.addBooleanOption("Xdoclint:none").setValue(true);
    options.addBooleanOption("javafx").setValue(true);
    
    // All doc-files are located in src/main/docs because Gradle's javadoc doesn't copy
    // over the doc-files if they are embedded with the sources. I find this arrangement
    // somewhat cleaner anyway (never was a fan of mixing javadoc files with the sources)
    doLast {
        copy {
            from "src/main/docs"
            into "$buildDir/docs/javadoc"
        }
    }
}
// merge everything into one jar
// https://github.com/johnrengelman/shadow
shadow {
}
shadowJar {
    mergeServiceFiles {
        include 'META-INF/services/org.fxyz3d.*'
    }
    //transform(ServiceFileTransformer) {
    //path = 'META-INF/services/org.fxyz3d.*'
    //}
}
// sign all generated jars
//signing {
//sign configurations.archives
// sign shadow.shadowJar
//}
// determine the artifacts to be uploaded
artifacts {
    // add the by shadow generated jar to the artifacts
    archives shadowJar
}
